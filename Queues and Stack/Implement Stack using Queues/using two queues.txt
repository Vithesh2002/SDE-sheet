class MyStack {
    Queue<Integer>q1;
    Queue<Integer>q2;
    public MyStack() {
        q1=new LinkedList<>();
        q2=new LinkedList<>();
    }
    public void push(int x) {
        if(q2.isEmpty()) q1.offer(x);
        else q2.offer(x);
    }
    
    public int pop() {
    if(q1.isEmpty() && q2.isEmpty())return -1;
    
    Queue<Integer>E=(q1.isEmpty())?q1:q2;
    Queue<Integer>F=(q1.isEmpty())?q2:q1;

    int n=F.size();

    for(int i=0;i<n-1;i++)  E.offer(F.poll());

    return F.poll();
    }
    
    public int top() {
    if(q1.isEmpty() && q2.isEmpty())return -1;

    Queue<Integer>E=(q1.isEmpty())?q1:q2;
    Queue<Integer>F=(q1.isEmpty())?q2:q1;

    int n=F.size();

    for(int i=0;i<n-1;i++)  E.offer(F.poll());
    
    int ele=F.poll();
    E.offer(ele);
    return ele;

    }
    
    public boolean empty() {
        if(q1.isEmpty() && q2.isEmpty())return true;
        return false;     
    }
}