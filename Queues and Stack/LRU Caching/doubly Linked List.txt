class LRUCache {
    int capacity;
    HashMap<Integer,Node>map;
    Node head;
    Node tail;
    int count;
//...................................................
    public LRUCache(int capacity) {
        this.capacity=capacity;

        head=new Node(0,0);
        tail=new Node(0,0);      // |head|-><-|tail| we are adding and removing the node behind the tail and infront of the head

        head.next=tail;
        tail.prev=head;

        count=0;
        map=new HashMap<>();
    }
//...................................................
    public int get(int key) {
       
        if(!map.containsKey(key))return -1;           // return -1 if key is not present

        Node cur=map.get(key);

        deleteNode(cur);
        addNode(cur);
        return cur.val;
    }
//...................................................
    public void put(int key, int value) { 
        Node cur=new Node(key,value);

        if(map.containsKey(key))
            deleteNode(map.get(key));            //if contains duplicate node

        if(count>=capacity) 
        deleteNode(head.next);                   //if capacity exceeds

        addNode(cur);
}
//................................................... add node in front of head
void deleteNode(Node cur)
{
    cur.prev.next=cur.next;
    cur.next.prev=cur.prev;

    count--;
    map.remove(cur.key);
}
//................................................... add node behind tail
void addNode(Node cur)
{
    tail.prev.next=cur;
    cur.prev=tail.prev;
    cur.next=tail;
    tail.prev=cur;

    count++;
    map.put(cur.key,cur);
}
//...................................................
class Node{
    Node next=null;
    Node prev=null;
    int val;
    int key;
    Node(int key,int val)
    {
        this.key=key;
        this.val=val;
    }
}
}