class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {

        int n1=nums1.length,n2=nums2.length;
        if(n1>n2)return findMedianSortedArrays(nums2,nums1);
        int n=n1+n2;
        int range=(n1+n2+1)/2;
        int low=0,high=nums1.length;         //0 means no elements are taken, nums.length-1 ,means all elements are taken

        while(low<=high)                     // if high is not set to n1 in the begining then we can never include the last element.
        {
            int cut1=(low+high)>>1;           //cut1 is the starting of second part of the from the first array
            int cut2=range-cut1;              ////cut2 is the starting of second part of the from the second array
 
            int left1=cut1==0?Integer.MIN_VALUE:nums1[cut1-1];
            int left2=cut2==0?Integer.MIN_VALUE:nums2[cut2-1];

            int right1=cut1==n1?Integer.MAX_VALUE:nums1[cut1];
            int right2=cut2==n2?Integer.MAX_VALUE:nums2[cut2];

            if(left1<=right2 && left2<=right1)
            {
                if(n%2==0) return ((double)Math.max(left1,left2)+(double)Math.min(right1,right2))/2.0;

                else return Math.max(left1,left2);
            }
            else if(left1>right2)high=cut1-1;

            else low=cut1+1; 
        }
        return 0;
    }
}