class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int i=0,j=0,count=0,target=0;
        int m=nums1.length,n=nums2.length;
        int total=m+n;
        if(total%2==0) target=total/2-1;
        else target=total/2;

        while(i<m && j<n){
            if(target==count){
                if(total%2==0)    // There are 5 cases here which we must keep in mind
                {
                    if(i+1>=m && j+1>=n)return ((double)nums1[i]+(double)nums2[j])/2;              // if both array have size 1

                    else  if(i+1>=m)return ((double)nums2[j]+(double)Math.min(nums1[i],nums2[j+1]))/2;   //if i is the last index

                    else if(j+1>=n) return((double)nums1[i]+(double)Math.min(nums2[j],nums1[i+1]))/2;    //if j is the last index

                    eles if(nums1[i]<=nums2[j]) return ((double)nums1[i]+(double)Math.min(nums1[i+1],nums2[j]))/2; 

                    else return ((double)nums2[j]+(double)Math.min(nums2[j+1],nums1[i]))/2;   
                }
                else return (double)Math.min(nums1[i],nums2[j]);
            }
            else if(nums1[i]<=nums2[j]){
                i++;
                count++;
            }
            else{
                j++;
                count++;
            }
        }

        while(i<m)
        {
            if(target==count){
                if(total%2==0)return ((double)nums1[i]+(double)nums1[i+1])/2;
                else return (double)nums1[i];
            }
            else{
                count++;
                i++;
            }
        }

        while(j<n)
        {
            if(target==count){
                if(total%2==0)return ((double)nums2[j]+(double)nums2[j+1])/2;
                else return (double)nums2[j];
            }
            else{
                count++;
                j++;
            }
        }
        return 0;  //this is executed if two arrays are empty
    }
}