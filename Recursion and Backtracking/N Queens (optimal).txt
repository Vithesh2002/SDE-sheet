class Solution {
    public List<List<String>> solveNQueens(int n) {
        boolean[]up=new boolean[n];
        boolean[]right=new boolean[2*n-1];
        boolean[]left=new boolean[2*n-1];

        List<List<String>>al=new ArrayList<>();
        List<String>li=new ArrayList<>();
        queen(n,al,li,0,up,right,left);
        return al;
    }

    public void queen(int n,List<List<String>>al,List<String>li,int i,boolean[]up,boolean[]right,boolean[]left)
    {
        if(li.size()>=n)
        {
            al.add(new ArrayList<>(li));
            return;
        }
        if(i>=n)return;

        for(int j=0;j<n;j++)
        {
           if(! check(i,j,n,up,right,left) )continue;
           up[j]=right[i+j]=left[n-1+j-i]=true;
           String s=makestring(j,n);
           li.add(s);
           queen(n,al,li,i+1,up,right,left);
           li.remove(li.size()-1);
           up[j]=right[i+j]=left[n-1+j-i]=false;
        }
    }
    public boolean check(int i,int j,int n,boolean[]up,boolean[]right,boolean[]left)
    {
        if(up[j])return false;
        if(i+j<=2*n-1 && right[i+j])return false;
        if(n-1+j-i>=0 && n-1+j-i<=2*n-1 && left[n-1+j-i])return false;          // formalae to remember n-1+j-i
        return true;
    }
    public String makestring(int j,int n)
    {
        StringBuilder sb=new StringBuilder();
        int i=0;
        for(i=0;i<j;i++) sb.append(".");
        sb.append("Q");
        while(++i<n)sb.append(".");
        return sb.toString();
    }
}