lass Solution {
    public List<Integer> preorderTraversal(TreeNode root) {                  // The trick is to keep track of cur node
        List<Integer>al=new ArrayList<>();                                   // Whenever cur makes a movement we have to consider the cur node
        TreeNode cur=root;
        while(cur!=null)
        {
            if(cur.left==null)
            {
                al.add(cur.val);
                cur=cur.right;                                           //if left is null
            }
            else{
                TreeNode prev=cur.left;
                while(prev.right!=null && prev.right!=cur)
                {
                    prev=prev.right;
                }
                if(prev.right==null){
                    prev.right=cur;
                    cur=cur.left;
                }
                else{
                    prev.right=null;
                    al.add(cur.val);                               //left is complete ,now we go to right. store the value
                    cur=cur.right;                                      
                }
            }
        }
        return al;
    }
}