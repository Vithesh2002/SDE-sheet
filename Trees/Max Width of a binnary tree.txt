class Solution {
    public int widthOfBinaryTree(TreeNode root) {
        Queue<Node>qu=new LinkedList<>();
        qu.add(new Node(root,1));
        int n=1;
        int max=1;

        while(!qu.isEmpty())
        {
            int min=qu.peek().val; //minimum value of the current row
            int m=0;               //to record the number of elements in the next row
                          
            int cur=-1;              //variable to calculate max width
            int last=-1;            //to calculate the width

            for(int i=0;i<n;i++)
            {
                Node a=qu.poll();  //current node
                int pos=a.val;     //current pos

                if(i==0) cur=pos;
                if(i==n-1) last=pos;
                
                if(a.node.left!=null)
                {
                    qu.add(new Node(a.node.left,(2*(pos-min))+1));
                    m++;
                }
                if(a.node.right!=null)
                {
                    qu.add(new Node(a.node.right,(2*(pos-min))+2));
                    m++;
                }        
            }
            max=Math.max(max,last-cur+1);   // caluclate the max
            n=m;                            //set the number of nodes we got in this row
        }
     return max;
    }
}
class Node{
    TreeNode node;
    int val;
    Node(TreeNode node,int val)
    {
        this.node=node;
        this.val=val;
    }
}