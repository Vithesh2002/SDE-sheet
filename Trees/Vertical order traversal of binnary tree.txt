class Solution {
    public List<List<Integer>> verticalTraversal(TreeNode root) {
        TreeMap<Integer,List<Node>>map=new TreeMap<>();
        dfs(root,map,0,0);
            
        compare c=new compare();
        List<List<Integer>>list=new ArrayList<>();
        for(Map.Entry<Integer,List<Node>> m:map.entrySet())
        {
            Collections.sort(m.getValue(),c);
            List<Integer>li=new ArrayList<>();
            for(Node n:m.getValue())
            {
                li.add(n.val);
            }
            list.add(li);
        }
        return list;
    }

    public void dfs(TreeNode root,TreeMap<Integer,List<Node>>map,int row,int col)
    {
        if(root==null)return;

        if(map.containsKey(col))
              map.get(col).add(new Node(root.val,row));

        else map.put(col,new ArrayList<>(Arrays.asList(new Node(root.val,row))));

        dfs(root.left,map,row+1,col-1);
        dfs(root.right,map,row+1,col+1);
    }
}
class compare implements Comparator<Node>
{
    @Override
    public int compare(Node a,Node b)
    {
        if(a.row<b.row)return -1;
        else if(a.row>b.row)return 1;
        else return a.val-b.val;
    }
}
class Node{
    int val=0;
    int row=-1;
    Node(int val,int row)
    {
        this.val=val;
        this.row=row;
    }
}